from tkinter import *
from tkinter import ttk, messagebox
from math import pi
from tkinter import PhotoImage
from PIL import Image, ImageTk  # –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Pillow: pip install pillow
import ttkbootstrap as tb

from tkinter import messagebox

def show_about():
    messagebox.showinfo(
        "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–º–∞ —Ñ–∏–≥—É—Ä\n\n"
        "–ê–≤—Ç–æ—Ä: –ü–∞–Ω–æ–≤ –î–º–∏—Ç—Ä–∏–π\n"
        "–ì—Ä—É–ø–ø–∞: –ö405—Å9-3\n"
        "–ì–æ–¥: 2025\n\n"
        "github: https://github.com/dimidroloff"
    )

def show_technology():
    messagebox.showinfo(
        "–û –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
        "–í –ø—Ä–æ–µ–∫—Ç–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã:\nPython 3.8\n"
        "Tkinter\n"
        "Pillow 10.4.0\n"
        "ttkbootstrap 1.13.9"
    )

def show_formuls():
    messagebox.showinfo(
        "–û —Ñ–æ—Ä–º—É–ª–∞—Ö",
        "V –∫—É–± = \t\tabc\n"
        "V –ø–∏—Ä–∞–º–∏–¥–∞ = \t1/3 * S–æ—Å–Ω * h\n"
        "V –∫–æ–Ω—É—Å = \t1/3 * œÄ * r¬≤\n"
        "V —Ü–∏–ª–∏–Ω–¥—Ä = \tœÄ * r¬≤ * h\n"
        "V —à–∞—Ä = \t\t4/3 * œÄ * r¬≥"
    )

def create_entry(placeholder, showed=False):
    ret = ttk.Entry(root, width=25)
    add_placeholder(ret, placeholder)
    if showed:
        ret.pack(anchor=N, padx=6, pady=6)
    return ret


def add_placeholder(entry, placeholder):
    def on_focus_in(event):
        if entry.get() == placeholder:
            entry.delete(0, END)
            entry.config(foreground='black')

    def on_focus_out(event):
        if not entry.get():
            entry.insert(0, placeholder)
            entry.config(foreground='gray')

    entry.insert(0, placeholder)
    entry.config(foreground='gray')
    entry.bind("<FocusIn>", on_focus_in)
    entry.bind("<FocusOut>", on_focus_out)


def update_choice(event):
    btn.pack_forget()
    label.pack_forget()
    selection = choice.get()
    all_entries = cubes + pyramids + cones + balls + cylinders
    for i in all_entries:
        i.pack_forget()
    if selection == objects[0]:
        for i in cubes:
            i.pack(anchor=N, padx=6, pady=6)
    elif selection == objects[1]:
        for i in pyramids:
            i.pack(anchor=N, padx=6, pady=6)
    elif selection == objects[2]:
        for i in cones:
            i.pack(anchor=N, padx=6, pady=6)
    elif selection == objects[3]:
        for i in balls:
            i.pack(anchor=N, padx=6, pady=6)
    elif selection == objects[4]:
        for i in cylinders:
            i.pack(anchor=N, padx=6, pady=6)
    btn.pack(anchor=N, padx=6, pady=25)
    image = images.get(selection)
    if image:
        image_label.config(image=image)
        image_label.image = image  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É

    label.pack(anchor=N, padx=6, pady=6)
    label["foreground"] = "black"
    label["text"] = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"


def get_value(obj):
    ret = eval(obj.get().replace(",", "."))
    if ret < 0:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    return ret


def enter():
    selection = choice.get()
    label["foreground"] = "black"
    try:
        if selection == objects[0]:
            # V–∫—É–± = –∞ + –± + —Å
            v = get_value(cube1) * get_value(cube2) * get_value(cube3)
            res = f"–û–±—ä–µ–º {objects[0].lower()}–∞ = {v:.2f}"

        elif selection == objects[1]:
            # V –ø–∏—Ä–∞–º–∏–¥—ã = S–æ—Å–Ω * h * 1/3
            v = get_value(pyramid1) * get_value(pyramid2) * 1 / 3
            res = f"–û–±—ä–µ–º {objects[1].lower()[:-1]}—ã = {v:.2f}"

        elif selection == objects[2]:
            # V –∫–æ–Ω—É—Å–∞ = 1/3 * pi * r^2 * h
            v = get_value(cone1) ** 2 * get_value(cone2) * 1 / 3 * pi
            res = f"–û–±—ä–µ–º {objects[2].lower()}–∞ = {v:.2f}"

        elif selection == objects[3]:
            # V —à–∞—Ä–∞ = 4/3 * pi * r^3
            v = get_value(ball1) ** 3 * 4 / 3 * pi
            res = f"–û–±—ä–µ–º {objects[3].lower()}–∞ = {v:.2f}"

        elif selection == objects[4]:
            # V —Ü–∏–ª–∏–Ω–¥—Ä–∞ = pi * r^2 * h
            v = get_value(cylinder1) ** 2 * pi * get_value(cylinder2)
            res = f"–û–±—ä–µ–º {objects[4].lower()}–∞ = {v:.2f}"

        else:
            res = "–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ"
            label["foreground"] = "red"
            label["text"] = res
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

    except Exception:
        res = "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
        label["foreground"] = "red"
        label["text"] = res
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

    label["text"] = res

# –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
root = tb.Window(themename="simplex")  # –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã: "litera", "cosmo", "darkly", "cyborg", "flatly" –∏ —Ç.–¥. journal simplex
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
window_width = 300
window_height = 500
x = (screen_width // 2) - (window_width // 2)
y = (screen_height // 2) - (window_height // 2)
root.geometry(f"{window_width}x{window_height}+{x}+{y}")
root.title("–û–±—ä–µ–º üíÖ")
icon = PhotoImage(file="logo.png")  # PNG-–∏–∫–æ–Ω–∫–∞
root.iconphoto(False, icon)

menu = Menu(root)
root.config(menu=menu)

info_menu = Menu(menu, tearoff=0)
menu.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=info_menu)
info_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=show_about)
info_menu.add_command(label="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è", command=show_technology)
info_menu.add_command(label="–§–æ—Ä–º—É–ª—ã", command=show_formuls)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ enter
root.bind('<Return>', lambda event: enter())

image_label = Label(root)
image_label.pack(anchor=N, pady=10)

# –°–ª–æ–≤–∞—Ä—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ (–≥—Ä—É–∑–∏–º 1 —Ä–∞–∑)
images = {
    "–ö—É–±": ImageTk.PhotoImage(Image.open("cube.jpg").resize((120, 120))),
    "–ü–∏—Ä–∞–º–∏–¥–∞": ImageTk.PhotoImage(Image.open("pyramid.jpg").resize((120, 120))),
    "–ö–æ–Ω—É—Å": ImageTk.PhotoImage(Image.open("cone.jpg").resize((120, 120))),
    "–®–∞—Ä": ImageTk.PhotoImage(Image.open("ball.jpg").resize((120, 120))),
    "–¶–∏–ª–∏–Ω–¥—Ä": ImageTk.PhotoImage(Image.open("cylinder.jpg").resize((120, 120))),
}
image = images.get("–ö—É–±")
if image:
    image_label.config(image=image)
    image_label.image = image  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É

objects = ["–ö—É–±", "–ü–∏—Ä–∞–º–∏–¥–∞", "–ö–æ–Ω—É—Å", "–®–∞—Ä", "–¶–∏–ª–∏–Ω–¥—Ä"]
objects_var = StringVar(value=objects[0])

choice = ttk.Combobox(textvariable=objects_var, values=objects, width=20, state="readonly")
choice.pack(anchor=N, pady=20)
choice.bind("<<ComboboxSelected>>", update_choice)

# V–∫—É–± = –∞ * –± * —Å
cubes = []
cube1 = create_entry("–î–ª–∏–Ω–∞ –∫—É–±–∞ (a)", True)
cube2 = create_entry("–®–∏—Ä–∏–Ω–∞ –∫—É–±–∞ (b)", True)
cube3 = create_entry("–í—ã—Å–æ—Ç–∞ –∫—É–±–∞ (c)", True)
cubes.extend([cube1, cube2, cube3])

# V –ø–∏—Ä–∞–º–∏–¥—ã = S–æ—Å–Ω * h * 1/3
pyramids = []
pyramid1 = create_entry("–ü–ª–æ—â–∞–¥—å –æ—Å–Ω–æ–≤–∞–Ω–∏—è (S–æ—Å–Ω)")
pyramid2 = create_entry("–í—ã—Å–æ—Ç–∞ –ø–∏—Ä–∞–º–∏–¥—ã (h)")
pyramids.extend([pyramid1, pyramid2])

# V –∫–æ–Ω—É—Å–∞ = 1/3 * pi * r^2 * h
cones = []
cone1 = create_entry("–†–∞–¥–∏—É—Å –æ—Å–Ω–æ–≤–∞–Ω–∏—è (r)")
cone2 = create_entry("–í—ã—Å–æ—Ç–∞ –ø–∏—Ä–∞–º–∏–¥—ã (h)")
cones.extend([cone1, cone2])

# V —à–∞—Ä–∞ = 4/3 * pi * r^3
balls = []
ball1 = create_entry("–†–∞–¥–∏—É—Å —à–∞—Ä–∞ (r)")
balls.extend([ball1])

# V —Ü–∏–ª–∏–Ω–¥—Ä–∞ = pi * r^2 * h
cylinders = []
cylinder1 = create_entry("–†–∞–¥–∏—É—Å —Ü–∏–ª–∏–Ω–¥—Ä–∞ (r)")
cylinder2 = create_entry("–í—ã—Å–æ—Ç–∞ —Ü–∏–ª–∏–Ω–¥—Ä–∞ (h)")
cylinders.extend([cylinder1, cylinder2])

# –∫–Ω–æ–ø–∫–∞
btn = ttk.Button(text="–í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—ä–µ–º", command=enter)
btn.pack(anchor=N, padx=6, pady=25)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
label = ttk.Label(text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É")
label.pack(anchor=N, padx=6, pady=6)

root.mainloop()
